const DATA = `
{
  "items": [
    {
      "sys": { "id": "1" },
      "fields": {
        "title": "queen panel bed",
        "price": 10.99,
        "image": { "fields": { "file": { "url": "./images/product-1.jpeg" } } }
      }
    },
    {
      "sys": { "id": "2" },
      "fields": {
        "title": "king panel bed",
        "price": 12.99,
        "image": { "fields": { "file": { "url": "./images/product-2.jpeg" } } }
      }
    },
    {
      "sys": { "id": "3" },
      "fields": {
        "title": "single panel bed",
        "price": 12.99,
        "image": { "fields": { "file": { "url": "./images/product-3.jpeg" } } }
      }
    },
    {
      "sys": { "id": "4" },
      "fields": {
        "title": "twin panel bed",
        "price": 22.99,
        "image": { "fields": { "file": { "url": "./images/product-4.jpeg" } } }
      }
    },
    {
      "sys": { "id": "5" },
      "fields": {
        "title": "fridge",
        "price": 88.99,
        "image": { "fields": { "file": { "url": "./images/product-5.jpeg" } } }
      }
    },
    {
      "sys": { "id": "6" },
      "fields": {
        "title": "dresser",
        "price": 32.99,
        "image": { "fields": { "file": { "url": "./images/product-6.jpeg" } } }
      }
    },
    {
      "sys": { "id": "7" },
      "fields": {
        "title": "couch",
        "price": 45.99,
        "image": { "fields": { "file": { "url": "./images/product-7.jpeg" } } }
      }
    },
    {
      "sys": { "id": "8" },
      "fields": {
        "title": "table",
        "price": 33.99,
        "image": { "fields": { "file": { "url": "./images/product-8.jpeg" } } }
      }
    }
  ]
}
`;

function ElementBuilder(tag) {
  this.element = document.createElement(tag);

  this.text = function (text) {
    this.element.textContent = text;
    return this;
  }

  this.html = function (content) {
    this.element.innerHTML = content;
    return this;
  }

  this.class = function (className) {
    this.element.className = className;
    return this;
  }

  this.src = function (url) {
    this.element.src = url;
    return this;
  }

  this.onClick = function (fn) {
    this.element.onclick = fn;
    return this;
  }

  this.appendTo = function (child) {
    this.element.appendChild(child.build());
    return this;
  }

  this.build = function () {
    return this.element;
  }

}

const builder = name => new ElementBuilder(name);

class Product {
  constructor({ id, title, price, image }) {
    this.id = id;
    this.title = title;
    this.price = price;
    this.image = image;
  }

  render() {
    return builder('article').class('product')
      .appendTo(builder('div').class('img-container')
        .appendTo(builder('img').class('product-img').src(this.image))
        .appendTo(builder('button').class('bag-btn')
          .html(`<i class='fas fa-shopping-cart'></i>Add to cart<i class='fas fa-shopping-cart'></i>`)
          .onClick(e => cart.add({ id: this.id, title: this.title, price: this.price, image: this.image }))
        )
      )
      .appendTo(builder('h3').text(this.title)).build()
  }
}

class Products {
  constructor() {
    this.productList = JSON.parse(DATA);

    this.cacheDOM();
    this.render();
  }

  cacheDOM() {
    this.$productCenter = document.querySelector('.products-center');
  }

  render() {
    this.productList.items.map(e =>
      this.$productCenter.appendChild(
        new Product({ id: e.sys.id, title: e.fields.title, price: e.fields.price, image: e.fields.image.fields.file.url }).render()
      )
    );
  }
}

class CartItem {
  constructor({ id, title, price, image, qty }) {
    this.id = id;
    this.title = title;
    this.price = price;
    this.image = image;
    this.qty = qty;
  }

  render() {
    return builder('div').class('cart-item')
      .appendTo(builder('img').src(this.image))
      .appendTo(builder('div')
        .appendTo(builder('h4').text(this.title))
        .appendTo(builder('h5').text(this.price))
        .appendTo(builder('span').class('remove-item').text('remove'))
      )
      .appendTo(builder('div')
        .appendTo(builder('i').class('fas fa-chevron-up').onClick(e => cart.increase(this.id)))
        .appendTo(builder('p').class('item-amount').text(this.qty))
        .appendTo(builder('i').class('fas fa-chevron-down').onClick(e => cart.decrease(this.id)))
      ).build()
      
  }
}

class Cart {
  constructor() {
    this.cartList = [];
    
    this.cacheDOM();
    this.render();
    this.bindEvents();
  }
  
  cacheDOM() {
    this.$cartBtn = document.querySelector('.cart-btn');
    this.$closeCart = document.querySelector('.close-cart');
    this.$cartOverlay = document.querySelector('.cart-overlay');
    this.$cart = document.querySelector('.cart');
    this.$cartItems = document.querySelector('.cart-items');
    this.$cartContent = document.querySelector('.cart-content');
    this.$cartTotal = document.querySelector('.cart-total');
    this.$clearCart = document.querySelector('.clear-cart');
  }
  
  bindEvents() {
    this.$cartBtn.addEventListener('click', this.toggle.bind(this));
    this.$closeCart.addEventListener('click', this.toggle.bind(this));
    this.$clearCart.addEventListener('click', this.clear.bind(this));
  }

  render() {
    this.$cartTotal.textContent = 0;
    this.$cartContent.innerHTML = '';
    this.total = 0;
    this.$cartItems.textContent = 0;
    this.cartItems = 0;

    this.cartList.map(e => {
      this.$cartContent.appendChild(new CartItem({ id: e.id, title: e.title, price: e.price, image: e.image, qty: e.qty }).render());

      this.totalItems(this.total += e.price * e.qty);
      this.items(this.cartItems += e.qty);
    })
  }

  add({ id, title, price, image }) {
    const index = this.findIndex(id);
    if (index === -1)
      this.cartList.push(new CartItem({ id, title, price, image, qty: 1 }))
    else
      ++this.cartList[index].qty

    this.render();
  }

  increase(id) {
    const index = this.findIndex(id);
    if (index !== -1)
      ++this.cartList[index].qty

    this.render();
  }

  decrease(id) {
    const index = this.findIndex(id);
    if (index !== -1)
      (this.cartList[index].qty === 1) ? this.remove(index) : --this.cartList[index].qty

    this.render();
  }

  remove(index) {
    this.cartList.splice(index, 1);
  }

  clear() {
    this.cartList.splice(0, this.cartList.length);
    this.render();
    this.totalItems(this.total = 0);
    this.items(this.cartItems = 0);
  }

  items(i = 0) {
    this.$cartItems.textContent = i;
  }

  totalItems(t = 0) {
    this.$cartTotal.textContent = t.toFixed(2);
  }

  toggle(e) {
    e.stopPropagation();
    this.$cartOverlay.classList.toggle('transparentBcg');
    this.$cart.classList.toggle('showCart');
  }

  findIndex(id) {
    return this.cartList.findIndex(e => e.id === id);
  }
}

const App = new Products();
const cart = new Cart();